module examples {

global_var: Int = 5

function Inc() {
    global_var += 1
}

print "before = ", global_var

Inc()

print "after = ", global_var

function Begin(self: Int[])
{
    ArraySize(self);

    return self[0];
}

function End(self: Int[])
{

}

/*type Iterator<T> {
    target: T
    index: Int

    new(self, target, index) {
        self.target = target;
        self.index = index;
    }

    operator++(self) {
        return new Iterator<T>(self.target, self.index + 1);
    }
}*/

type Iterator {
    target: Any
    index: Int

    new(self, target, index) {
        self.target = target;
        self.index = index;
    }

    operator++(self) {
        return new Iterator(self.target, self.index + 1);
    }
}

type WrappedArray {
    ary: Int[];

    Begin(self) {
        return new Iterator(self.ary, 0);
    }

    End(self) {
        return new Iterator(self.ary, ArraySize(self.ary));
    }
}

ary: WrappedArray
ary.ary = [1,2,3,4,5]

print "begin = ", ary.Begin()

// for x in ary {
//     print x
// }

print ary

}
