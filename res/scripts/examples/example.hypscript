module types {
  // custom types
  class User {
    username: String
    password: String

    printUsername := (self) {
      print "hello, my name is: ", self.username
    }
  }

  generic MyGeneric<T> = class {
    thing: T
  };

  class MyNonGeneric {
    thing: String
  }

  let user = new User
  print 'user = ', user
  user.printUsername();

  // create an instance of the type
  //user := new User

  // array of User objects
  let users: User[]// NOTE: same as writing Array<User>
  print "USERS = ", users

  let my_non_g: MyNonGeneric = new MyNonGeneric;
  print "my_non_g = ", my_non_g;
  print "my_non_g.thing = ", my_non_g.thing;

  let myg : MyGeneric<Int> = new MyGeneric<Int>;
  print typeof(myg)
  myg.thing = 1239;
  print "myg = ", myg;
  print "myg.thing = ", myg.thing;
  

  //print "users[0]", users[0]


  // NOTE: a User object cannot be null by default
  // to allow null, use Maybe<User> or User? (they're the same, but different syntax)

  //maybeUser: User? // NOTE: set to null by default.
  //maybeUser = new User // no longer null.
}
