


import mandelbrot;
import "../tests.hypscript";

// mandelbrot::MandelbrotLine();

timer : Float = 0.0;
num_ticks : UInt = 0;

class Engine {
    handle : any = null;

    func CreateEntity(self : Engine) : Entity {
        return Engine_CreateEntity(self.handle);
    }
};

export engine : Engine = new Engine();


class ExampleController {
private:
    entity: any;

public:
    ExampleController(self: ExampleController)
    {
        self.entity = null;
    }

    func OnAdded(self: ExampleController, entity: any)
    {
        test_entity : Entity = engine.CreateEntity();

        Print("test_entity = %\n", test_entity);
        // Print("test_entity.GetName() = %\n", test_entity.GetName());
        // test_entity.SetTranslation()

        self.entity = entity;

        Print("Script added controller to Entity: %s\n", entity);
    }

    func OnRemoved(self: ExampleController, entity: any)
    {
        Print("Script removed from Entity: %s\n", entity);

        self.entity = null;
    }

    func OnTick(self: ExampleController, delta: Float)
    {
        timer += delta;
        num_ticks++;

        if (num_ticks > 50) {
            const avg_fps : Float = timer / num_ticks;

            Print("Avg ticks per second: %\n", avg_fps);

            timer = 0.0;
            num_ticks = 0;
        }
    }
};

export movement_controller : ExampleController = new ExampleController;
