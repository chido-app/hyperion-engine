


import mandelbrot;

mandelbrot::MandelbrotLine();

// export class MovementController {
// public:
//     node: any;

//     MovementController(self: MovementController) : MovementController
//     {
//         self.node = null;

//         return self;
//     }

//     func OnAdded(self: MovementController, node: any)
//     {
//         self.node = node;

//         Print("Added controller to node: %s\n", node);
//     }

//     func OnRemoved(self: MovementController, node: any)
//     {
//         Print("Removed from node: %s\n", node);

//         self.node = null;
//     }

//     func OnTick(self: MovementController, node: any, delta: Float)
//     {

//     }
// };

// const movement_controller = new MovementController();

// export const OnAdded = movement_controller.OnAdded;
// export const OnRemoved = movement_controller.OnRemoved;
// export const OnTick = movement_controller.OnTick;



let controller_node: any = null;

let global_time: Float = 0.0;
let num_ticks: UInt = 0;

let test_vector = new Vector3();


func Expect( cond : Bool )
{
    Print("check cond: %\n", cond);

    if (!cond) {
        throw "Assertion failed!";
    }
}

class ClassWithDefaultGenericArgs< T = Int, U = String >
{
    let t: T;
    let u: U;
};

if (true) {
    let test = new ClassWithDefaultGenericArgs < >;
    Print("ClassWithDefaultGenericArgs < >%\n", test);

    Expect(test.t is Int);
    Expect(test.u is String);
}

if (true) {
    let test = new ClassWithDefaultGenericArgs < Int >;
    Print("ClassWithDefaultGenericArgs < Int >%\n", test);

    Expect(test.t is Int);
    Expect(test.u is String);
}

if (true) {
    let test = new ClassWithDefaultGenericArgs < String, Int >;
    Print("ClassWithDefaultGenericArgs < String, Int >%\n", test);

    Expect(test.t is String);
    Expect(test.u is Int);
}

if (true) {
    let test = new ClassWithDefaultGenericArgs < T : String, U : Int >;
    Print("ClassWithDefaultGenericArgs < T : String, U : Int >%\n", test);

    Expect(test.t is String);
    Expect(test.u is Int);
}

if (true) {
    let test = new ClassWithDefaultGenericArgs < U : String, T : Int >;
    Print("ClassWithDefaultGenericArgs < U : String, T : Int >%\n", test);

    Expect(test.t is Int);
    Expect(test.u is String);
}

func GenericFunction <T> (t : T, cond : Bool)
{
    return cond ? t : t - 1;
}

func GenericFunctionWithDefault <T = Int> (t : T, cond : Bool)
{
    return cond ? t : t + 1;
}

class GenericClass<T>
{
    func DoThing(self, t : T, y : T) : T
    {
        return t + y;
    }
}

if (true) {
    let test = new GenericClass<Int>();
    Expect(test.DoThing(1, 1) is Int);
    Expect(test.DoThing(1, 1) == 2);
}

if (true) {
    let test = new GenericClass<Float>();
    Expect(test.DoThing(1.0, 1.0) is Float);
    Expect(test.DoThing(1.0, 1.0) == 2.0);
}
class GenericClass2 <T>
{
    val : T;
}

// const pi <T> = 3.141592;
// Print("π == %\n", pi<Float>);
// Print("π == %\n", pi<Int>);


if (true) {
    Print("Test generic classes type specificiations\n");


    // try {
        const test1 = new GenericClass2<Int>();
        Expect(test1 is GenericClass2<Int>);
        // Expect(!(test1 is GenericClass2<String>));
        Expect(test1.val is Int);
        Expect(test1.val == 0);

        test2 : GenericClass2<Float> = new GenericClass2<Float>();
        Expect(test2 is GenericClass2<Float>);
        // Expect(!(test2 is GenericClass2<Int>));
        Expect(test2.val is Float);
        Expect(test2.val == 0.0);
    // } catch {
    //     Print("Caught exception\n");
    // }

    Print("After catch\n");
}

if (true) {
    Expect(GenericFunction<Float>(5.0, true) == 5.0);
    Expect(GenericFunction<Float>(5.0, false) == 4.0);
    Expect(GenericFunction<UInt>(5, true) == 5);
    Expect(GenericFunction<UInt>(5, false) == 4);
    Expect(GenericFunction<Int>(5, true) == 5);
    Expect(GenericFunction<Int>(5, false) == 4);

    const u : UInt = 5;
    Expect(u is UInt);

    Expect(GenericFunctionWithDefault<>(5, true) == 5);
    Expect(GenericFunctionWithDefault<>(5, false) == 6);
    // Expect(GenericFunctionWithDefault<>(u, true) == 5);
    // Expect(GenericFunctionWithDefault<>(u, false) == 6);
    // Expect(GenericFunctionWithDefault<>(u, true) == u);
    // Expect(GenericFunctionWithDefault<>(u, false) == u + 1);

    // $meta {
    //     // expect to break
    //     func BreakMe <T> ()
    //     {
    //         return 1;
    //     }

    //     BreakMe();
    // }
}

class ClassWithConstructor
{
    i : Int = 0;
    items : Int[];

    ClassWithConstructor(self : ClassWithConstructor, int_value : Int)
    {
        Print("This = %\n", ClassWithConstructor);
        Print("self = %\n", self);

        self.i = int_value;
    }

    func DoThing<T>(self : ClassWithConstructor, t : T) : T
    {
        return t * 5.0;
    }

    func MakeNew(self : ClassWithConstructor, i : Int) : ClassWithConstructor
    {
        Print("self = %\n", self);

        ArrayPush(self.items, i);

        return new ClassWithConstructor(int_value : i);
    }
}

class Derived : ClassWithConstructor
{
    Derived(self : Derived)
    {
        Print("Construct derived class\n");
    }
}

func VarArgsFunc(foo : Int, args : String...)
{
    Print("in varargs function\n");

    if (foo != ArraySize(args)) {
        Print("Sizes are not equal\n");
    } else {
        Print("Sizes are equal\n");
    }

    for (i : Int = 0; i < ArraySize(args); i++) {
        Print("item : %\n", args[i]);
    }
}

if (true) {
    let c = new ClassWithConstructor(int_value: 5);
    Expect(c.i == 5);

    let c2 = c.MakeNew(i : 125);//ClassWithConstructor.MakeNew(i : 125);
    Print("Foo : %\n", c2.i);
    Expect(c2.i == 125);

    let c3 = c.MakeNew(i : 129);//ClassWithConstructor.MakeNew(i : 125);
    Print("Foo : %\n", c3.i);
    Expect(c3.i == 129);

    let xx = c.DoThing<Int>;
    Expect(xx(c, 443) == 2215);
    // Expect(c.DoThing<Int>(443) == 2215);
    // Expect(c.DoThing<Int>(443) is Int);

    Print("Items : %\n", c.items);

    Expect(ArraySize(c.items) == 2);
    Expect(c.items[0] == 125);
    Expect(c.items[1] == 129);
    Expect(c.items[1] is Int);

    let d = new Derived();
    Print("derived = %\n", d);
    Print("derived.i = %\n", d.i);
}

if (true) {
    VarArgsFunc(5, "this", "is", "a", "test");
    VarArgsFunc(4, "this", "is", "a", "test");
}

// if (true) {
//     let test = new GenericClass<String>();
//     Expect(test.DoThing("hello ", "world") is String);
//     Expect(test.DoThing("hello ", "world") == "hello world");
// }

export func OnAdded(node: any) {
    //Print("Added controller to node: %s\n", node);

    controller_node = node;

    //Print("controller_node now = %\n", controller_node);

    //mandelbrot::MandlebrotLine();
};

export func OnRemoved(node: any) {
    Print("Remove controller from node: %s\n", controller_node);
    controller_node = null;
};

export func OnTick(node: any, delta: Float) {
    return;

    global_time += delta;
    num_ticks += 1;

    //test_vector.SetX(test_vector.GetX() + delta);

    if (global_time >= 1.0) {
        let avg_time: Float = global_time / num_ticks;

        Print("CPU Ticks per second (in script): %\n", 1.0 / avg_time);
        //Print("test_vector: %\n", test_vector.ToString());
        global_time = 0.0;
        num_ticks = 0;
    }
};

Print("End of script\n");