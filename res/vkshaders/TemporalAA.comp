#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_nonuniform_qualifier : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "include/defines.inc"
#include "include/shared.inc"

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS
#include "include/scene.inc"
#undef HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

layout(set = 0, binding = 0) uniform texture2D color_texture;
layout(set = 0, binding = 1) uniform texture2D prev_color_texture;
layout(set = 0, binding = 2) uniform texture2D velocity_texture;
layout(set = 0, binding = 3) uniform texture2D depth_texture;
layout(set = 0, binding = 4) uniform sampler sampler_linear;
layout(set = 0, binding = 5) uniform sampler sampler_nearest;
layout(set = 0, binding = 6, rgba16f) writeonly uniform image2D output_image;

layout(push_constant) uniform PushConstants
{
    uvec2 dimensions;
    uvec2 depth_texture_dimensions;
    vec2 camera_near_far;
};

#include "include/Temporal.glsl"

void main()
{
    const uvec2 pixel_coord = gl_GlobalInvocationID.xy;
    
    if (any(greaterThanEqual(pixel_coord, dimensions))) {
        return;
    }

    const vec2 uv = (vec2(pixel_coord) + 0.5) / vec2(dimensions);

    const vec2 texel_size = vec2(1.0) / vec2(dimensions);
    const vec2 depth_texel_size = vec2(1.0) / vec2(depth_texture_dimensions);

    // const vec3 closest_fragment = ClosestFragment(depth_texture, uv, depth_texel_size);
    // vec2 velocity = Texture2D(sampler_nearest, velocity_texture, closest_fragment.xy).rg;

    vec2 velocity;
    float view_space_depth;

    InitTemporalParams(
        depth_texture,
        velocity_texture,
        depth_texture_dimensions,
        uv,
        camera_near_far.x,
        camera_near_far.y,
        velocity,
        view_space_depth
    );

    // vec4 result = TemporalResolve(color_texture, prev_color_texture, uv, velocity, texel_size);
    vec4 result = TemporalBlendVarying(
        color_texture,
        prev_color_texture,
        uv,
        velocity,
        texel_size,
        view_space_depth
    );

    result = any(isnan(result)) ? vec4(0.0) : result;

    imageStore(output_image, clamp(ivec2(pixel_coord), ivec2(0.0), ivec2(dimensions - 1)), result);
}