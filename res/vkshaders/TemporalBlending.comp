#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout  : require
#extension GL_EXT_nonuniform_qualifier : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#ifndef OUTPUT_FORMAT
    #if defined(OUTPUT_RGBA8)
        #define OUTPUT_FORMAT rgba8
    #elif defined(OUTPUT_RGBA16F)
        #define OUTPUT_FORMAT rgba16f
    #elif defined(OUTPUT_RGBA32F)
        #define OUTPUT_FORMAT rgba32f
    #else
        #define OUTPUT_FORMAT rgba8
    #endif
#endif

layout(set = 0, binding = 0) uniform texture2D input_texture;
layout(set = 0, binding = 1) uniform texture2D prev_input_texture;
layout(set = 0, binding = 2) uniform texture2D velocity_texture;
layout(set = 0, binding = 3) uniform sampler sampler_linear;
layout(set = 0, binding = 4) uniform sampler sampler_nearest;
layout(set = 0, binding = 5, OUTPUT_FORMAT) uniform writeonly image2D blur_output_image;

// #define MINMAX_3X3_ROUNDED
#define MINMAX_4TAP_VARYING

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS
#include "./include/defines.inc"
#include "./include/packing.inc"
#include "./include/defines.inc"
#include "./include/packing.inc"
#include "./include/shared.inc"
#include "./include/scene.inc"
#include "./include/Temporal.glsl"
#undef HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

layout(std140, set = 0, binding = 6, row_major) readonly buffer SceneBuffer
{
    Scene scene;
};

layout(set = 0, binding = 7) uniform texture2D depth_texture;

layout(push_constant) uniform PushConstant {
    uvec2 output_dimensions;
    uvec2 depth_texture_dimensions;
};

void main(void)
{
    const uvec2 coord = gl_GlobalInvocationID.xy;

    if (any(greaterThanEqual(coord, output_dimensions))) {
        return;
    }

    const float velocity_scale = 8.0;

    const vec2 uv = (vec2(coord) + 0.5) / vec2(output_dimensions);
    const vec2 texel_size = vec2(1.0) / vec2(output_dimensions);

    vec4 color = Texture2D(sampler_nearest, input_texture, uv);

    vec2 velocity;
    float view_space_depth;

    InitTemporalParams(
        depth_texture,
        velocity_texture,
        depth_texture_dimensions,
        uv,
        scene.camera_near,
        scene.camera_far,
        velocity,
        view_space_depth
    );


#if 0
    vec4 previous_color = Texture2D(sampler_linear, prev_input_texture, uv - velocity);
    vec4 color_ycocg = AdjustColorIn(RGBToYCoCg(color));
    vec4 previous_color_ycocg = RGBToYCoCg(previous_color);
    // previous_color = ClampColor_3x3(input_texture, previous_color, uv, texel_size);
    vec4 mean = color_ycocg;
    vec4 stddev = mean * mean;

    const vec2 offsets[4] = vec2[](
        vec2(-1.0, 0.0),
        vec2(1.0, 0.0),
        vec2(0.0, -1.0),
        vec2(0.0, 1.0)
    );

    for (int i = 0; i < 4; i++) {
        vec4 c = RGBToYCoCg(Texture2D(sampler_nearest, input_texture, clamp(uv + (offsets[i] * texel_size), 0.0, 1.0)));
        mean += c;
        stddev += c * c;
    }

    mean /= 5.0;
    stddev = sqrt(stddev / 5.0 - (mean * mean));

    vec4 clipped = ClipToAABB(color_ycocg, previous_color_ycocg, mean, stddev);
    const float lum0 = RGBToYCoCg(color).r;
    const float lum1 = clipped.r;

#elif 0

    color = TemporalResolve(input_texture, prev_input_texture, uv, velocity, texel_size);

#elif defined(MINMAX_3X3_ROUNDED)
    color = TemporalBlendRounded(input_texture, prev_input_texture, uv, velocity, texel_size, view_space_depth);
#elif defined(MINMAX_4TAP_VARYING)
    color = TemporalBlendVarying(input_texture, prev_input_texture, uv, velocity, texel_size, view_space_depth);
#endif

    imageStore(blur_output_image, clamp(ivec2(coord), ivec2(0), ivec2(output_dimensions) - 1), color);
}
