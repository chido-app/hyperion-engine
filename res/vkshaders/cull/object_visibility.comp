#version 450

#extension GL_EXT_scalar_block_layout  : require
#extension GL_EXT_nonuniform_qualifier : require

layout(local_size_x = 256) in;

#include "../include/defines.inc"
#include "../include/shared.inc"
#include "../include/aabb.inc"
#include "./shared.inc"

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS
#include "../include/object.inc"
#include "../include/scene.inc"
#undef HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

layout(std430, set = 0, binding = 0, row_major) readonly buffer ObjectBuffer {
    Object object;
} objects[];

layout(std140, set = 0, binding = 1, row_major) readonly buffer SceneBuffer {
    Scene scene;
};

struct IndirectDrawCommand {
    // VkDrawIndexedIndirectCommand
    uint index_count;
    uint instance_count;
    uint first_index;
    int  vertex_offset;
    uint first_instance;
};

struct ObjectInstance {
    uint entity_id;
    uint draw_command_index;
    uint batch_index;
    uint num_indices;
    vec4 bounding_sphere;
    vec4 aabb_max;
    vec4 aabb_min;
};

layout(std140, set = 0, binding = 3) readonly buffer InstancesBuffer {
    ObjectInstance instances[];
};

layout(set = 0, binding = 4) writeonly buffer IndirectDrawCommandsBuffer {
    IndirectDrawCommand indirect_draw_commands[];
};

// I wrote compute culling on the GPU and all I got was this lousy t-shirt

layout(set = 0, binding = 5) uniform texture2D depth_pyramid;
layout(set = 0, binding = 6) uniform sampler   depth_pyramid_sampler;

layout(push_constant) uniform ObjectVisibilityData {
    uint  batch_offset;
    uint  num_drawables;
    uint  scene_id;
    uvec2 depth_pyramid_dimensions;
} push_constants;

void main()
{
    const uint id    = gl_GlobalInvocationID.x;
    const uint index = push_constants.batch_offset + id;

    if (id >= push_constants.num_drawables) {
        return;
    }

    ObjectInstance object_instance = instances[index];
    const uint entity_id           = object_instance.entity_id;
    const uint draw_command_index  = object_instance.draw_command_index;

    uint num_instances = 0;

    // entity id should not ever be zero/unset
    if (all(bvec2(entity_id, push_constants.scene_id))) {
        // get view/proj matrices from scene.
        mat4 view = scene.view;
        mat4 proj = scene.projection;

        AABB aabb;
        aabb.max = object_instance.aabb_max.xyz;
        aabb.min = object_instance.aabb_min.xyz;

        vec3 clip_min = vec3(1, 1, 1);
        vec3 clip_max = vec3(-1, -1, 0);

        // transform worldspace aabb to screenspace
        for (int i = 0; i < 8; i++) {
            vec4 clip_pos = proj * view * vec4(AABBGetCorner(aabb, i), 1.0);
            clip_pos.z = max(clip_pos.z, 0.0);
            clip_pos.xyz /= clip_pos.w;
            clip_pos.xy = clamp(clip_pos.xy, -1.0, 1.0);

            clip_min = min(clip_pos.xyz, clip_min);
            clip_max = max(clip_pos.xyz, clip_max);
        }

        clip_min.xy = clip_min.xy * vec2(0.5) + vec2(0.5);
        clip_max.xy = clip_max.xy * vec2(0.5) + vec2(0.5);

        vec4 screenspace_aabb = vec4(clip_min.xy, clip_max.xy);

        // Calculate hi-Z buffer mip
        vec2 size = (clip_max.xy - clip_min.xy) * float(max(push_constants.depth_pyramid_dimensions.x, push_constants.depth_pyramid_dimensions.y));
        float mip = ceil(log2(max(size.x, size.y)));
 
        // mip = clamp(mip, 0, 9.0);
 
        // Texel footprint for the lower (finer-grained) level
        /*float level_lower = max(mip - 1, 0);
        float scale = exp2(-level_lower);
        vec2 a = floor(screenspace_aabb.xy * scale);
        vec2 b = ceil(screenspace_aabb.zw * scale);
        vec2 dims = b - a;
 
        // Use the lower level if we only touch <= 2 texels in both dimensions
        if (dims.x <= 2 && dims.y <= 2) {
            mip = level_lower;
        }*/

        vec2 mip_image_size = textureSize(sampler2D(depth_pyramid, depth_pyramid_sampler), int(mip));
        vec2 sample_coord = (screenspace_aabb.xy + screenspace_aabb.zw) * 0.5;
        ivec2 sample_texel_coord = ivec2(sample_coord * mip_image_size);//ivec2(sample_coord * (mip_image_size - vec2(1.0)) + vec2(0.5));

        const vec4 depths = {
            Texture2DTexelLod(depth_pyramid_sampler, depth_pyramid, clamp(sample_texel_coord + depth_pyramid_offsets[0], ivec2(0), ivec2(mip_image_size) - ivec2(1)), int(mip)).r,
            Texture2DTexelLod(depth_pyramid_sampler, depth_pyramid, clamp(sample_texel_coord + depth_pyramid_offsets[1], ivec2(0), ivec2(mip_image_size) - ivec2(1)), int(mip)).r,
            Texture2DTexelLod(depth_pyramid_sampler, depth_pyramid, clamp(sample_texel_coord + depth_pyramid_offsets[2], ivec2(0), ivec2(mip_image_size) - ivec2(1)), int(mip)).r,
            Texture2DTexelLod(depth_pyramid_sampler, depth_pyramid, clamp(sample_texel_coord + depth_pyramid_offsets[3], ivec2(0), ivec2(mip_image_size) - ivec2(1)), int(mip)).r
            // Texture2DLod(depth_pyramid_sampler, depth_pyramid, clip_min.xy, floor(mip)).r,
            // Texture2DLod(depth_pyramid_sampler, depth_pyramid, vec2(clip_max.x, clip_min.y), floor(mip)).r,
            // Texture2DLod(depth_pyramid_sampler, depth_pyramid, clip_max.xy, floor(mip)).r,
            // Texture2DLod(depth_pyramid_sampler, depth_pyramid, vec2(clip_min.x, clip_max.y), floor(mip)).r
        };

        // const float depth_value = Texture2DLod(depth_pyramid_sampler, depth_pyramid, vec2(0.0), 0.0).r;
 
        // //find the max depth
        const float max_depth = max(max(max(depths.x, depths.y), depths.z), depths.w);
        // const float min_depth = min(min(min(depths.x, depths.y), depths.z), depths.w);
        num_instances += int(clip_min.z <= max_depth);

        /*vec3 sphere_center  = object_instance.bounding_sphere.xyz;
        float sphere_radius = object_instance.bounding_sphere.w;

        sphere_center = (view * vec4(sphere_center, 1.0)).xyz;
        sphere_center.y *= -1.0;

        vec4 screenspace_aabb;
        if (ProjectSphereToScreenSpaceAABB(
            sphere_center,
            sphere_radius,
            scene.camera_near,
            proj[0][0],
            proj[1][1],
            screenspace_aabb
        )) {
            float width  = (screenspace_aabb.z - screenspace_aabb.x) * float(push_constants.depth_pyramid_dimensions.x);
            float height = (screenspace_aabb.w - screenspace_aabb.y) * float(push_constants.depth_pyramid_dimensions.y);

            float level  = floor(log2(max(width, height)));

            float depth = Texture2DLod(
                depth_pyramid_sampler,
                depth_pyramid,
                vec2(screenspace_aabb.xy + screenspace_aabb.zw) * 0.5,
                level
            ).r;

            const vec4 depths = {
                Texture2DLod(depth_pyramid_sampler, depth_pyramid, screenspace_aabb.xy, level).r,
                Texture2DLod(depth_pyramid_sampler, depth_pyramid, screenspace_aabb.zy, level).r,
                Texture2DLod(depth_pyramid_sampler, depth_pyramid, screenspace_aabb.xw, level).r,
                Texture2DLod(depth_pyramid_sampler, depth_pyramid, screenspace_aabb.zw, level).r
            };

            //find the max depth
            const float max_depth = min(min(min(depths.x, depths.y), depths.z), depths.w);

            float depth_sphere = scene.camera_near / (sphere_center.z - sphere_radius);

            num_instances += int(depth_sphere <= max_depth);
            // num_instances++;
        } else {
            num_instances++;
        }*/

        // convert worldspace aabb into screenspace aabb.

        // get optimal mip level of depth pyramid

        // compare depths from sampled depth pyramid.
        // if 

    }

    indirect_draw_commands[draw_command_index].index_count    = object_instance.num_indices;
    indirect_draw_commands[draw_command_index].instance_count = num_instances;
    indirect_draw_commands[draw_command_index].first_index    = 0;
    indirect_draw_commands[draw_command_index].vertex_offset  = 0;
    indirect_draw_commands[draw_command_index].first_instance = 0;
}